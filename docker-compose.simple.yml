# DwayBank Simple Docker Compose for Local Testing
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dwaybank-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-dwaybank}
      POSTGRES_USER: ${DB_USER:-dwaybank_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-DwayBank2024!SecureP@ssw0rd}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dwaybank_user} -d ${DB_NAME:-dwaybank}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dwaybank-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dwaybank-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-DwayBank2024!RedisP@ssw0rd}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-DwayBank2024!RedisP@ssw0rd}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dwaybank-network

  # Backend Application
  backend:
    build:
      context: ./packages/backend
      dockerfile: ../../docker/backend/Dockerfile
      target: development
    container_name: dwaybank-backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-dwaybank}
      DB_USER: ${DB_USER:-dwaybank_user}
      DB_PASSWORD: ${DB_PASSWORD:-DwayBank2024!SecureP@ssw0rd}
      DB_SSL: "false"
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-DwayBank2024!RedisP@ssw0rd}
      REDIS_DB: 0
      
      # JWT Security
      JWT_SECRET: ${JWT_SECRET:-DwayBank2024!JWT_SECRET_32_CHAR_MINIMUM_FOR_PRODUCTION_SECURITY}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-DwayBank2024!REFRESH_SECRET_32_CHAR_MINIMUM_FOR_PRODUCTION}
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      JWT_ALGORITHM: HS384
      
      # Security Configuration
      BCRYPT_ROUNDS: 12
      SESSION_SECRET: ${SESSION_SECRET:-DwayBank2024!SESSION_SECRET_32_CHAR_MINIMUM_FOR_PRODUCTION}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-DwayBank2024!32ByteEncryptionKeyForWalletDataSecurityInProd}
      ENCRYPTION_ALGORITHM: aes-256-gcm
      
      # CORS Configuration
      CORS_ORIGIN: http://localhost:3001,http://frontend:3001
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      RATE_LIMIT_SKIP_SUCCESSFUL: "true"
      
      # MFA Configuration
      MFA_ISSUER: DwayBank
      MFA_WINDOW: 2
      MFA_BACKUP_CODES_COUNT: 10
      
      # Monitoring
      LOG_LEVEL: info
      ENABLE_REQUEST_LOGGING: "true"
      ENABLE_PERFORMANCE_MONITORING: "true"
      
      # Development Features
      ENABLE_SWAGGER: "false"
      ENABLE_SEED_DATA: "false"
      
    ports:
      - "3000:3000"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - dwaybank-network

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend-nextjs/Dockerfile
      target: development
    container_name: dwaybank-frontend
    user: "1001:1001"
    environment:
      NODE_ENV: development
      PORT: 3001
      HOSTNAME: "0.0.0.0"
      NEXT_TELEMETRY_DISABLED: 1
      
      # API Configuration
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_APP_NAME: "DwayBank Neo Banking"
      NEXT_PUBLIC_APP_VERSION: "1.0.0"
      
      # Security Configuration
      NEXT_PUBLIC_ENV: development
      
    ports:
      - "3001:3001"
    volumes:
      - ./packages/frontend-nextjs/src:/app/src
      - ./packages/frontend-nextjs/public:/app/public
      - ./packages/frontend-nextjs/next.config.ts:/app/next.config.ts
      - ./packages/frontend-nextjs/tsconfig.json:/app/tsconfig.json
      - ./packages/frontend-nextjs/tailwind.config.js:/app/tailwind.config.js
      - ./packages/frontend-nextjs/postcss.config.js:/app/postcss.config.js
      - ./packages/frontend-nextjs/package.json:/app/package.json
      - /app/node_modules
      - frontend_next:/app/.next
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    restart: unless-stopped
    networks:
      - dwaybank-network

  # Nginx Reverse Proxy (Production Ready)
  nginx:
    image: nginx:1.25-alpine
    container_name: dwaybank-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - dwaybank-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local
  frontend_next:
    driver: local

# Networks
networks:
  dwaybank-network:
    driver: bridge