# DwayBank Smart Wallet - Production Docker Compose Configuration
# Production-ready multi-service setup with monitoring and security

version: '3.8'

services:
  # ================================
  # DATABASE SERVICES
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: dwaybank-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-dwaybank}
      POSTGRES_USER: ${DB_USER:-dwaybank_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--data-checksums --auth-host=scram-sha-256"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dwaybank_user} -d ${DB_NAME:-dwaybank}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: dwaybank-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # APPLICATION SERVICES
  # ================================
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    image: ${DOCKER_REGISTRY:-ghcr.io}/dwaybank/smart-wallet-backend:${APP_VERSION:-latest}
    container_name: dwaybank-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-dwaybank}
      DB_USER: ${DB_USER:-dwaybank_user}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      API_BASE_URL: ${API_BASE_URL:-https://api.dwaybank.com}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://app.dwaybank.com}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_MAX: "100"
      RATE_LIMIT_WINDOW: "900000"
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET}
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
    image: ${DOCKER_REGISTRY:-ghcr.io}/dwaybank/smart-wallet-frontend:${APP_VERSION:-latest}
    container_name: dwaybank-frontend-prod
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    ports:
      - "${FRONTEND_PORT:-80}:80"
    volumes:
      - frontend_logs:/var/log/nginx
      - ./docker/frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/frontend/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ================================
  # MONITORING SERVICES
  # ================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: dwaybank-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:10.1.0
    container_name: dwaybank-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_LOG_LEVEL: "warn"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: dwaybank-node-exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    volumes:
      - '/:/host:ro,rslave'
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true

  # ================================
  # LOG AGGREGATION
  # ================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dwaybank-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - network.host=0.0.0.0
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: dwaybank-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: dwaybank-kibana
      LOGGING_QUIET: "true"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: dwaybank-logstash
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - backend_logs:/app/logs:ro
      - frontend_logs:/var/log/nginx:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true

  # ================================
  # SECURITY & BACKUP SERVICES
  # ================================
  backup:
    image: postgres:15-alpine
    container_name: dwaybank-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-dwaybank}
      POSTGRES_USER: ${DB_USER:-dwaybank_user}
      POSTGRES_HOST: postgres
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BACKUP_BUCKET: ${S3_BACKUP_BUCKET}
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
      - ./scripts/restore.sh:/restore.sh:ro
    command: sh -c "chmod +x /backup.sh && chmod +x /restore.sh && crond -f"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - dwaybank-network
    security_opt:
      - no-new-privileges:true

  # SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: dwaybank-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: certbot certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - frontend
    networks:
      - dwaybank-network

# ================================
# VOLUMES
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  frontend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  dwaybank-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: dwaybank-prod