name: DwayBank CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: dwaybank/smart-wallet
  REGISTRY: docker.io

jobs:
  # ================================
  # QUALITY ASSURANCE & TESTING
  # ================================
  
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript compilation
        run: npm run build

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,js,json}"

  security-audit:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: dwaybank_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run database migrations
        run: npm run migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: dwaybank_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: dwaybank_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key
          SESSION_SECRET: test-session-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # ================================
  # DOCKER BUILD & CONTAINERIZATION
  # ================================

  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ================================
  # INTEGRATION & E2E TESTING
  # ================================

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: dwaybank_integration
          POSTGRES_USER: integration_user
          POSTGRES_PASSWORD: integration_password
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application in background
        run: |
          nohup npm start &
          sleep 10
        env:
          NODE_ENV: integration
          PORT: 3000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: dwaybank_integration
          DB_USER: integration_user
          DB_PASSWORD: integration_password
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: integration-jwt-secret
          SESSION_SECRET: integration-session-secret

      - name: Wait for application startup
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run integration tests
        run: npm run test -- --testNamePattern="Integration"
        env:
          NODE_ENV: integration
          API_BASE_URL: http://localhost:3000

  # ================================
  # DEPLOYMENT STAGING
  # ================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:staging
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment"
          echo "Image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, or cloud provider CLI

  # ================================
  # PRODUCTION DEPLOYMENT
  # ================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE }}:v1.${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production environment
        run: |
          echo "🚀 Deploying to production environment"
          echo "Image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
          # Add your production deployment commands here
          # Example: kubectl, helm, or cloud provider CLI

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.${{ github.run_number }}
          release_name: Release v1.${{ github.run_number }}
          body: |
            ## DwayBank Smart Wallet Release v1.${{ github.run_number }}
            
            **Deployment Information:**
            - Commit: ${{ github.sha }}
            - Docker Image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            - Deployment Date: ${{ github.event.head_commit.timestamp }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # ================================
  # POST-DEPLOYMENT VALIDATION
  # ================================

  post-deployment-tests:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests against production
        run: |
          echo "🔍 Running smoke tests against production"
          # Add your production smoke tests here
          # Example: API health checks, critical user journey tests

      - name: Performance baseline tests
        run: |
          echo "📊 Running performance baseline tests"
          # Add your performance tests here
          # Example: load testing, response time validation

      - name: Security validation
        run: |
          echo "🔒 Running security validation"
          # Add your security validation here
          # Example: SSL certificate validation, security headers check

  # ================================
  # CLEANUP & NOTIFICATIONS
  # ================================

  cleanup:
    name: Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: always()
    
    steps:
      - name: Clean up old Docker images
        run: |
          echo "🧹 Cleaning up old Docker images"
          # Add cleanup commands here

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow