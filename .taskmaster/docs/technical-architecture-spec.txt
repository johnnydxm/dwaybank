<context>
# Technical Architecture Overview
This document defines the technical implementation strategy for DwayBank Smart Wallet MVP using open-source financial infrastructure. The architecture leverages Apache Fineract, Blnk/Midaz ledger systems, and Hyperledger Fabric to create a competitive moat through transparency, cost efficiency, and community-driven innovation.

**Strategic Decision**: Use open-source financial stack to avoid vendor lock-in, reduce licensing costs by 80%, and enable regulatory transparency through auditable code.

**Evolution Strategy**: 
- Phase 1 (MVP): Blnk ledger + Node.js microservices
- Phase 2 (Scale): Midaz integration for advanced financial operations  
- Phase 3 (Banking): Apache Fineract for full banking services
- Phase 4 (Compliance): Hyperledger Fabric for regulatory transparency

**Performance Targets**:
- MVP: <500ms API response, 99.5% uptime, 1K concurrent users
- Scale: <200ms response, 99.9% uptime, 10K concurrent users
- Enterprise: <100ms response, 99.99% uptime, 100K+ concurrent users

# System Components
**Frontend Layer**:
- React Native mobile applications (iOS/Android native)
- Progressive Web App (PWA) for desktop users
- Real-time WebSocket connections for live balance updates
- Biometric authentication integration
- Offline-first architecture with data synchronization

**API Gateway Layer**:
- Kong or Nginx Plus for API management
- OAuth 2.0 / OpenID Connect authentication
- Rate limiting: 100 requests/minute per user
- Load balancing with health checks
- API versioning and backward compatibility

**Microservices Architecture**:
- User & Authentication Service (Node.js + TypeScript)
- Wallet Aggregation Service (Node.js + TypeScript)  
- Risk & Compliance Engine (Python + FastAPI for ML models)
- Transfer & Payment Service (Node.js + TypeScript)
- AI Insights Service (Python + TensorFlow/PyTorch)
- Notification Service (Node.js + WebSocket)

**Ledger Core (Blnk Integration)**:
- Go-based double-entry accounting system
- Multi-currency support with real-time FX rates
- Immutable transaction recording with audit trails
- Balance reconciliation and monitoring
- gRPC APIs for high-performance communication

**Data Storage Layer**:
- PostgreSQL 14+ as primary database with ACID compliance
- Redis 7+ cluster for caching and session management
- InfluxDB for time-series financial data and metrics
- AWS S3 for document storage with encryption
- Event sourcing for audit requirements and replay capability

# Integration Specifications
**Apple Pay Integration**:
- PassKit API for card enumeration and tokenization  
- Secure Element communication for payment processing
- Touch ID/Face ID authentication for transactions
- Push notification registration for card updates
- PCI DSS Level 2 compliance for token handling

**Google Pay Integration**:
- Google Pay API for card data access
- Android KeyStore for secure key management
- Biometric authentication (fingerprint, face unlock)
- Google Cloud Messaging for push notifications
- OAuth 2.0 scope management for data access

**MetaMask/Crypto Wallet Integration**:
- WalletConnect v2 protocol for wallet connections
- Web3 provider integration for multiple blockchain networks
- Multi-signature wallet support for enhanced security
- Token balance aggregation across networks (Ethereum, Polygon, BSC)
- Transaction history synchronization with block explorers

**KYC/AML Integration**:
- Jumio or Onfido SDK for identity verification
- Document scanning and liveness detection
- OFAC sanctions list screening in real-time
- AML transaction monitoring with risk scoring
- Automated Suspicious Activity Report (SAR) generation

**Risk API Integration**:
- Sift Science for fraud detection and scoring
- Forter for real-time transaction risk assessment
- Custom ML models for spending pattern analysis
- Geographic risk assessment based on IP and device location
- Behavioral biometrics for anomaly detection
</context>
<PRD>
# Database Architecture
**PostgreSQL Schema Design**:
```sql
-- Core user and authentication
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    kyc_status kyc_status_enum DEFAULT 'pending',
    risk_profile JSONB DEFAULT '{}',
    mfa_enabled BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Connected payment methods
CREATE TABLE payment_methods (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    type payment_method_type NOT NULL,
    provider VARCHAR(50) NOT NULL,
    identifier VARCHAR(255) NOT NULL, -- encrypted token or address
    metadata JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT true,
    last_sync_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Transaction records (Blnk integration)
CREATE TABLE transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    payment_method_id UUID REFERENCES payment_methods(id),
    blnk_transaction_id VARCHAR(255) UNIQUE,
    amount DECIMAL(18,8) NOT NULL,
    currency VARCHAR(10) NOT NULL,
    type transaction_type NOT NULL,
    description TEXT,
    risk_score INTEGER DEFAULT 0,
    compliance_status compliance_status_enum DEFAULT 'pending',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Risk monitoring and alerts
CREATE TABLE risk_alerts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    transaction_id UUID REFERENCES transactions(id),
    alert_type VARCHAR(50) NOT NULL,
    severity alert_severity_enum NOT NULL,
    message TEXT NOT NULL,
    acknowledged BOOLEAN DEFAULT false,
    acknowledged_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

**Redis Caching Strategy**:
- User sessions: 15-minute expiration with sliding window
- Balance cache: 5-minute expiration with background refresh
- Rate limiting counters: Rolling window with automatic cleanup
- Real-time notifications: Pub/Sub for WebSocket connections

**Event Sourcing Implementation**:
- Immutable event log for all financial operations
- Event replay capability for debugging and compliance
- Snapshots for performance optimization
- Audit trail generation for regulatory requirements

# API Design Specifications
**RESTful API Endpoints**:
```typescript
// Authentication and user management
POST   /api/v1/auth/register     // User registration with KYC initiation
POST   /api/v1/auth/login        // User authentication with MFA
POST   /api/v1/auth/refresh      // JWT token refresh
DELETE /api/v1/auth/logout       // User logout and token invalidation

// Wallet and payment method management  
GET    /api/v1/wallets           // List connected payment methods
POST   /api/v1/wallets/connect   // Connect new wallet/payment method
DELETE /api/v1/wallets/{id}      // Disconnect payment method
POST   /api/v1/wallets/{id}/sync // Force synchronization of wallet data

// Portfolio and balance management
GET    /api/v1/portfolio         // Aggregated portfolio view
GET    /api/v1/portfolio/history // Historical balance data
GET    /api/v1/balances          // Real-time balance aggregation
WebSocket /ws/portfolio          // Real-time portfolio updates

// Risk management and controls
GET    /api/v1/risk/profile      // User risk profile and preferences
PUT    /api/v1/risk/profile      // Update risk preferences
GET    /api/v1/risk/alerts       // Risk alerts and notifications
POST   /api/v1/risk/limits       // Set spending limits and controls

// Transfer and payment processing
POST   /api/v1/transfers         // Initiate transfer between payment methods
GET    /api/v1/transfers/{id}    // Transfer status and details
GET    /api/v1/transfers/history // Transfer history with pagination

// AI insights and analytics
GET    /api/v1/insights          // Personalized financial insights
GET    /api/v1/insights/spending // Spending pattern analysis
GET    /api/v1/insights/recommendations // AI-generated recommendations

// Compliance and reporting
GET    /api/v1/compliance/kyc    // KYC status and requirements
POST   /api/v1/compliance/documents // Upload compliance documents
GET    /api/v1/compliance/reports // Regulatory reporting and tax documents
```

**GraphQL Schema (Alternative)**:
```graphql
type User {
  id: ID!
  email: String!
  kycStatus: KYCStatus!
  riskProfile: RiskProfile!
  paymentMethods: [PaymentMethod!]!
  portfolio: Portfolio!
}

type PaymentMethod {
  id: ID!
  type: PaymentMethodType!
  provider: String!
  balance: Balance
  lastSync: DateTime
  isActive: Boolean!
}

type Transaction {
  id: ID!
  amount: Decimal!
  currency: String!
  type: TransactionType!
  riskScore: Int!
  complianceStatus: ComplianceStatus!
  createdAt: DateTime!
}
```

# Security Implementation
**Authentication & Authorization**:
- JWT tokens with 15-minute expiration and refresh token rotation
- Multi-factor authentication (TOTP, SMS, biometric)
- OAuth 2.0 integration for third-party wallet connections
- Role-based access control (RBAC) with granular permissions
- Rate limiting per user and per endpoint

**Data Protection**:
- AES-256 encryption for data at rest using AWS KMS
- TLS 1.3 for all data in transit with certificate pinning
- PII tokenization for sensitive user data
- Secure key management with Hardware Security Modules (HSM)
- Regular key rotation with automated key lifecycle management

**PCI DSS Compliance Implementation**:
- Network segmentation with isolated card data environment
- Strong access controls with multi-factor authentication
- Encrypted transmission of cardholder data
- Regular security testing and vulnerability scanning
- Secure coding practices with automated SAST/DAST scanning

**Risk Monitoring Framework**:
```python
class RiskEngine:
    def assess_transaction_risk(self, transaction: Transaction) -> RiskScore:
        factors = [
            self.amount_risk(transaction.amount),
            self.velocity_risk(transaction.user_id),
            self.geographic_risk(transaction.location),
            self.behavioral_risk(transaction.user_id, transaction.pattern),
            self.device_risk(transaction.device_fingerprint)
        ]
        return self.calculate_composite_score(factors)
    
    def check_aml_compliance(self, transaction: Transaction) -> ComplianceResult:
        # OFAC sanctions screening
        sanctions_check = self.screen_sanctions(transaction.counterparty)
        
        # Transaction pattern analysis
        pattern_analysis = self.analyze_patterns(transaction)
        
        # Generate compliance score and recommendations
        return ComplianceResult(
            risk_score=self.calculate_risk_score(sanctions_check, pattern_analysis),
            requires_review=self.needs_manual_review(transaction),
            compliance_actions=self.generate_actions(transaction)
        )
```

# Performance Optimization
**Caching Strategy**:
- L1 Cache: Application-level caching with 1-minute TTL
- L2 Cache: Redis cluster with 5-minute TTL for balance data
- L3 Cache: CDN caching for static assets and API responses
- Cache invalidation: Event-driven invalidation on data changes

**Database Optimization**:
- Read replicas for query distribution and scaling
- Connection pooling with pgBouncer for efficient connections
- Indexing strategy for high-frequency queries
- Partitioning for large transaction tables
- Query optimization with EXPLAIN ANALYZE monitoring

**Microservices Performance**:
```typescript
// Connection pooling configuration
const pool = new Pool({
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  max: 20, // maximum connections
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Redis caching middleware
const cacheMiddleware = (ttl: number) => async (req: Request, res: Response, next: NextFunction) => {
  const key = `cache:${req.method}:${req.originalUrl}`;
  const cached = await redis.get(key);
  
  if (cached) {
    return res.json(JSON.parse(cached));
  }
  
  const originalSend = res.json;
  res.json = function(data: any) {
    redis.setex(key, ttl, JSON.stringify(data));
    return originalSend.call(this, data);
  };
  
  next();
};
```

# Deployment Architecture
**Kubernetes Configuration**:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dwaybank-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: dwaybank-api
  template:
    metadata:
      labels:
        app: dwaybank-api
    spec:
      containers:
      - name: api
        image: dwaybank/api:latest
        ports:
        - containerPort: 3000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: url
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: dwaybank-api-service
spec:
  selector:
    app: dwaybank-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
```

**CI/CD Pipeline**:
```yaml
name: DwayBank Deployment Pipeline
on:
  push:
    branches: [main, develop]
    
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run unit tests
      run: npm test
    - name: Run integration tests  
      run: npm run test:integration
    - name: Security audit
      run: npm audit --audit-level high
    - name: Code coverage
      run: npm run coverage
      
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Build Docker images
      run: |
        docker build -t dwaybank/api:${{ github.sha }} ./api
        docker build -t dwaybank/frontend:${{ github.sha }} ./frontend
    - name: Push to registry
      run: |
        docker push dwaybank/api:${{ github.sha }}
        docker push dwaybank/frontend:${{ github.sha }}
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to staging
      run: |
        kubectl set image deployment/dwaybank-api api=dwaybank/api:${{ github.sha }}
        kubectl rollout status deployment/dwaybank-api
    - name: Run smoke tests
      run: npm run test:smoke
    - name: Deploy to production
      if: success()
      run: |
        kubectl set image deployment/dwaybank-api api=dwaybank/api:${{ github.sha }} -n production
        kubectl rollout status deployment/dwaybank-api -n production
```

# Monitoring and Observability
**Metrics Collection**:
- Application metrics: Response times, error rates, throughput
- Business metrics: User registrations, wallet connections, transactions
- Infrastructure metrics: CPU, memory, disk, network utilization
- Custom financial metrics: Balance accuracy, risk score distribution

**Logging Strategy**:
```typescript
// Structured logging with correlation IDs
const logger = winston.createLogger({
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json(),
    winston.format.printf(({ timestamp, level, message, correlationId, ...meta }) => {
      return JSON.stringify({
        timestamp,
        level,
        message,
        correlationId,
        ...meta
      });
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'app.log' })
  ]
});

// Audit logging for financial operations
const auditLogger = (operation: string, userId: string, details: any) => {
  logger.info('Financial operation audit', {
    operation,
    userId,
    details,
    timestamp: new Date().toISOString(),
    source: 'dwaybank-api'
  });
};
```

**Alerting Configuration**:
- Critical alerts: API downtime, database failures, security breaches
- Warning alerts: High error rates, slow response times, resource utilization
- Business alerts: Unusual transaction patterns, compliance violations
- Integration alerts: Third-party API failures, wallet connection issues

# Open-Source Evolution Path
**Phase 2: Midaz Integration (6-12 months)**:
- Enhanced ledger capabilities with organizational hierarchy
- Advanced financial operations and reporting
- Multi-tenant architecture for business accounts
- Complex asset management and portfolio tracking

**Phase 3: Apache Fineract Integration (12-18 months)**:
- Full core banking platform capabilities
- Savings accounts, loans, and credit products
- Interest calculation and automated financial services
- Multi-currency banking with international transfers

**Phase 4: Hyperledger Fabric Implementation (18+ months)**:
- Blockchain-based compliance and audit trails
- Smart contracts for automated financial operations  
- Cross-border payment facilitation with regulatory transparency
- Tokenization of traditional financial assets

**Integration Architecture Evolution**:
```
Phase 1: Frontend → API Gateway → Microservices → Blnk → PostgreSQL
Phase 2: Frontend → API Gateway → Microservices → Midaz → PostgreSQL + Blnk
Phase 3: Frontend → API Gateway → Microservices → Fineract → Midaz → PostgreSQL
Phase 4: Frontend → API Gateway → Microservices → Fabric → Fineract → Midaz → PostgreSQL
```
</PRD>